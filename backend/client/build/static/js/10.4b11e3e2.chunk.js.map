{"version":3,"sources":["cmps/UserInfoButton.jsx","cmps/UserInfo.jsx","pages/UserProfilePage.jsx","assets/img/trophy.svg","assets/img/like.svg","cmps/CodeSnippet.jsx"],"names":["Button","btnTxt","clr","onClick","className","style","borderBottom","UserInfo","currUser","isOverview","isUploads","loadQuestionById","useContext","QuizContext","useState","infoToDisplay","setInfo","userUploads","setUserUploads","overview","techs","map","tech","idx","key","length","summery","knowledge","quiz","src","badge","alt","category","useEffect","uploads","name","questionData","question","code","CodeSnippet","a","Promise","all","uploadedQuestions","questionId","uploadedQuestion","uploadsData","setClickedInfo","UserProfilePage","loggedInUser","UserContext","user","setUser","txt","isActive","overviewBtn","setOverviewBtn","uploadsBtn","setUploadsBtn","history","useHistory","params","useParams","userId","UserService","getUser","replace","getCurrUser","id","onSectionBtnClick","imgUrl","_id","to","title","role","trophyIcon","points","likeIcon","likes","UserInfoButton","module","exports","Test","defaultProps","theme","language","tokens","getLineProps","getTokenProps","line","i","token"],"mappings":"0MAUeA,MARf,YAA2C,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,QAC3B,OACI,4BAAQC,UAAU,MAAMD,QAAS,kBAAMA,EAAQF,IAASI,MAAO,CAAEC,aAAa,aAAD,OAAeJ,KACvFD,I,gBC2FEM,MA5Ff,YAAwD,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,UAC9BC,EAAqBC,qBAAWC,KAAhCF,iBAD2C,EAElBG,mBAAS,cAFS,mBAE5CC,EAF4C,KAE7BC,EAF6B,OAGbF,mBAAS,IAHI,mBAG5CG,EAH4C,KAG/BC,EAH+B,KAK7CC,EACF,6BAASf,UAAU,YACf,yBAAKA,UAAU,gBACX,6BAASA,UAAU,0BACf,uBAAGA,UAAU,SAAb,WACA,yBAAKA,UAAU,uBACVI,EAASY,MAAQZ,EAASY,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAAe,uBAAGC,IAAKD,GAAMD,MAAa,yCAC9Ed,EAASY,OAAmC,IAA1BZ,EAASY,MAAMK,QAAgB,gDAG1D,6BAASrB,UAAU,4BACf,uBAAGA,UAAU,SAAb,UACA,uBAAGA,UAAU,WAAWI,EAASkB,SAAW,kBAGpD,6BAAStB,UAAU,aACf,uBAAGA,UAAU,SAAb,WACA,6BAASA,UAAU,6DACdI,EAASmB,UACNnB,EAASmB,UAAUN,KAAI,SAACO,EAAML,GAAP,OACnB,6BAASnB,UAAU,+CAA+CoB,IAAKD,GACnE,yBAAKM,IAAKD,EAAKE,MAAOC,IAAI,UAC1B,8BAAOH,EAAKI,cAIpB,yCAEHxB,EAASmB,WAA2C,IAA9BnB,EAASmB,UAAUF,QAAgB,gDAwD1E,OAlDAQ,qBAAU,WACNjB,EAAQG,KACT,CAACX,IAEJyB,qBAAU,WACN,IAAMC,EACF,6BAAS9B,UAAU,WACf,uBAAGA,UAAU,SACRa,EAAYQ,OADjB,iBACuCjB,EAAS2B,KADhD,KAGA,6BAAS/B,UAAU,uBACda,EAAYQ,OAAS,GAClBR,EAAYI,KAAI,SAACe,EAAcb,GAC3B,OACI,6BAASnB,UAAU,qBAAqBoB,IAAKD,GACzC,6BAASnB,UAAU,4CACf,8BAAOgC,EAAaC,WAEvBD,EAAaE,MACV,6BAASlC,UAAU,iBACf,kBAACmC,EAAA,EAAD,CAAaD,KAAMF,EAAaE,cAUpEtB,EAAQkB,KACT,CAACjB,IAEJgB,qBAAU,YACc,uCAAG,4BAAAO,EAAA,yDACf/B,GAAYO,EAAQG,IACpBT,EAFe,gCAGW+B,QAAQC,IAC9BlC,EAASmC,kBAAkBtB,IAA3B,uCAA+B,WAAMuB,GAAN,eAAAJ,EAAA,sEACE7B,EAAiBiC,GADnB,cACvBC,EADuB,yBAEpBA,GAFoB,2CAA/B,wDAJW,OAGTC,EAHS,OASf5B,EAAe4B,GATA,4EAAH,qDAapBC,KACD,CAACtC,EAAYC,IAET,yBAAKN,UAAU,aAAaW,I,kCCLxBiC,UA/Ef,WAA4B,IAChBC,EAAiBrC,qBAAWsC,KAA5BD,aADe,EAECnC,mBAAS,IAFV,mBAEhBqC,EAFgB,KAEVC,EAFU,OAGetC,mBAAS,CAC3CuC,IAAK,WACLC,UAAU,EACVpD,IAAK,YANc,mBAGhBqD,EAHgB,KAGHC,EAHG,OAQa1C,mBAAS,CACzCuC,IAAK,UACLC,UAAU,EACVpD,IAAK,uBAXc,mBAQhBuD,EARgB,KAQJC,EARI,KAcjBC,EAAUC,cACVC,EAASC,cAEf7B,qBAAU,YACW,uCAAG,WAAM8B,GAAN,eAAAvB,EAAA,sEACCwB,IAAYC,QAAQF,GADrB,QACZZ,EADY,QAEXhB,KAAOiB,EAAQD,GAAQQ,EAAQO,QAAQ,aAF5B,2CAAH,sDAQjBC,CAAYN,EAAOO,IAHfZ,EAAe,2BAAKD,GAAN,IAAmBD,UAAU,EAAMpD,IAAK,aACtDwD,EAAc,2BAAKD,GAAN,IAAkBH,UAAU,EAAOpD,IAAK,0BAI1D,CAAC2D,EAAOO,GAAIT,IAEf,IAAMU,EAAoB,SAAApE,GACP,aAAXA,GACAuD,EAAe,2BAAKD,GAAN,IAAmBD,UAAU,EAAMpD,IAAK,aACtDwD,EAAc,2BAAKD,GAAN,IAAkBH,UAAU,EAAOpD,IAAK,0BAErDwD,EAAc,2BAAKD,GAAN,IAAkBH,UAAU,EAAMpD,IAAK,aACpDsD,EAAe,2BAAKD,GAAN,IAAmBD,UAAU,EAAOpD,IAAK,0BAI/D,OACI,yBAAKE,UAAU,+BACX,4BAAQA,UAAU,gDACd,yBAAKA,UAAU,cAAcyB,IAAKsB,EAAKmB,OAAQvC,IAAI,YACnD,6BAAS3B,UAAU,kBACf,0BAAMA,UAAU,QAAQ+C,EAAKhB,MAC5Bc,GAAgBE,GAAQF,EAAasB,MAAQpB,EAAKoB,KAC/C,kBAAC,IAAD,CAAMnE,UAAU,WAAWoE,GAAE,wBAAmBvB,EAAasB,KAAOE,MAAM,gBAA1E,WAKR,0BAAMrE,UAAU,QAAQ+C,EAAKuB,MAC7B,6BAAStE,UAAU,eACf,6BAASA,UAAU,2BAA2BqE,MAAM,UAChD,yBAAK5C,IAAK8C,IAAY5C,IAAI,WAC1B,8BAAOoB,EAAKyB,SAEhB,6BAASxE,UAAU,0BAA0BqE,MAAM,SAC/C,yBAAK5C,IAAKgD,IAAU9C,IAAI,UACxB,8BAAOoB,EAAK2B,UAIxB,8BACI,6BAAS1E,UAAU,aACf,kBAAC2E,EAAD,CAAgB9E,OAAQsD,EAAYF,IAAKnD,IAAKqD,EAAYrD,IAAKC,QAASkE,IACxE,kBAACU,EAAD,CAAgB9E,OAAQwD,EAAWJ,IAAKnD,IAAKuD,EAAWvD,IAAKC,QAASkE,KAEzElB,EACG,kBAAC,EAAD,CAAU3C,SAAU2C,EAAM1C,WAAY8C,EAAYD,SAAU5C,UAAW+C,EAAWH,WAElF,6C,mBCjFpB0B,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,gCCA3C,qCAoBeC,IAhBF,SAAC,GAAD,IAAG5C,EAAH,EAAGA,KAAH,OACT,kBAAC,IAAD,iBAAe6C,IAAf,CAA6BC,MAAOA,IAAO9C,KAAMA,EAAM+C,SAAS,SAC3D,cAAGjF,UAAH,IAAcC,EAAd,EAAcA,MAAOiF,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,aAAcC,EAA3C,EAA2CA,cAA3C,OACG,yBAAKpF,UAAuB,eAAiBC,MAAOA,GAC/CiF,EAAOjE,KAAI,SAACoE,EAAMC,GAAP,OACR,wBAASH,EAAa,CAAEE,OAAMjE,IAAKkE,IAC9BD,EAAKpE,KAAI,SAACsE,EAAOnE,GAAR,OACN,yBAAUgE,EAAc,CAAEG,QAAOnE","file":"static/js/10.4b11e3e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Button({ btnTxt, clr, onClick }) {\r\n    return (\r\n        <button className=\"btn\" onClick={() => onClick(btnTxt)} style={{ borderBottom: `2px solid ${clr}` }}>\r\n            {btnTxt}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { QuizContext } from '../store/contexts/QuizContext';\r\nimport CodeSnippet from './CodeSnippet';\r\n\r\nfunction UserInfo({ currUser, isOverview, isUploads }) {\r\n    const { loadQuestionById } = useContext(QuizContext);\r\n    const [infoToDisplay, setInfo] = useState('Loading...');\r\n    const [userUploads, setUserUploads] = useState([]);\r\n\r\n    const overview = (\r\n        <article className=\"overview\">\r\n            <div className=\"wrapper flex\">\r\n                <section className=\"techs-container grow-1\">\r\n                    <p className=\"title\">Skills:</p>\r\n                    <div className=\"user-tech flex wrap\">\r\n                        {currUser.techs ? currUser.techs.map((tech, idx) => <p key={idx}>{tech}</p>) : <p>Loading...</p>}\r\n                        {currUser.techs && currUser.techs.length === 0 && <p>No skills yet.'</p>}\r\n                    </div>\r\n                </section>\r\n                <section className=\"summery-container grow-1\">\r\n                    <p className=\"title\">About:</p>\r\n                    <p className=\"summery\">{currUser.summery || 'No info yet.'}</p>\r\n                </section>\r\n            </div>\r\n            <section className=\"knowledge\">\r\n                <p className=\"title\">Badges:</p>\r\n                <section className=\"completed-quiz-container flex align-center justify-center\">\r\n                    {currUser.knowledge ? (\r\n                        currUser.knowledge.map((quiz, idx) => (\r\n                            <section className=\"completed-quiz flex flex-column align-center\" key={idx}>\r\n                                <img src={quiz.badge} alt=\"Badge\" />\r\n                                <span>{quiz.category}</span>\r\n                            </section>\r\n                        ))\r\n                    ) : (\r\n                        <p>Loading...</p>\r\n                    )}\r\n                    {currUser.knowledge && currUser.knowledge.length === 0 && <p>No badges yet.</p>}\r\n                </section>\r\n            </section>\r\n        </article>\r\n    );\r\n\r\n    useEffect(() => {\r\n        setInfo(overview);\r\n    }, [currUser]);\r\n\r\n    useEffect(() => {\r\n        const uploads = (\r\n            <article className=\"uploads\">\r\n                <p className=\"title\">\r\n                    {userUploads.length} Questions by {currUser.name}:\r\n                </p>\r\n                <section className=\"questions-container\">\r\n                    {userUploads.length > 0 &&\r\n                        userUploads.map((questionData, idx) => {\r\n                            return (\r\n                                <section className=\"question-container\" key={idx}>\r\n                                    <section className=\"question flex align-center space-between\">\r\n                                        <span>{questionData.question}</span>\r\n                                    </section>\r\n                                    {questionData.code && (\r\n                                        <section className=\"question-code\">\r\n                                            <CodeSnippet code={questionData.code} />\r\n                                        </section>\r\n                                    )}\r\n                                </section>\r\n                            );\r\n                        })}\r\n                </section>\r\n            </article>\r\n        );\r\n\r\n        setInfo(uploads);\r\n    }, [userUploads]);\r\n\r\n    useEffect(() => {\r\n        const setClickedInfo = async () => {\r\n            if (isOverview) setInfo(overview);\r\n            if (isUploads) {\r\n                const uploadsData = await Promise.all(\r\n                    currUser.uploadedQuestions.map(async questionId => {\r\n                        let uploadedQuestion = await loadQuestionById(questionId);\r\n                        return uploadedQuestion;\r\n                    })\r\n                );\r\n                setUserUploads(uploadsData);\r\n            }\r\n            return;\r\n        };\r\n        setClickedInfo();\r\n    }, [isOverview, isUploads]);\r\n\r\n    return <div className=\"user-info\">{infoToDisplay}</div>;\r\n}\r\n\r\nexport default UserInfo;\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory, useParams, Link } from 'react-router-dom';\r\nimport { UserContext } from '../store/contexts/UserContext.jsx';\r\nimport { UserService } from '../services/UserService.js';\r\nimport UserInfoButton from '../cmps/UserInfoButton.jsx';\r\nimport UserInfo from '../cmps/UserInfo.jsx';\r\nimport trophyIcon from '../assets/img/trophy.svg';\r\nimport likeIcon from '../assets/img/like.svg';\r\n\r\nfunction UserProfilePage() {\r\n    const { loggedInUser } = useContext(UserContext);\r\n    const [user, setUser] = useState({});\r\n    const [overviewBtn, setOverviewBtn] = useState({\r\n        txt: 'Overview',\r\n        isActive: true,\r\n        clr: '#FC335D',\r\n    });\r\n    const [uploadsBtn, setUploadsBtn] = useState({\r\n        txt: 'Uploads',\r\n        isActive: false,\r\n        clr: 'rgb(218, 218, 218)',\r\n    });\r\n\r\n    const history = useHistory();\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        const getCurrUser = async userId => {\r\n            let user = await UserService.getUser(userId);\r\n            user.name ? setUser(user) : history.replace('/err-page');\r\n        };\r\n        const displayOverview = () => {\r\n            setOverviewBtn({ ...overviewBtn, isActive: true, clr: '#FC335D' });\r\n            setUploadsBtn({ ...uploadsBtn, isActive: false, clr: 'rgb(218, 218, 218)' });\r\n        };\r\n        getCurrUser(params.id);\r\n        displayOverview();\r\n    }, [params.id, history]);\r\n\r\n    const onSectionBtnClick = btnTxt => {\r\n        if (btnTxt === 'Overview') {\r\n            setOverviewBtn({ ...overviewBtn, isActive: true, clr: '#FC335D' });\r\n            setUploadsBtn({ ...uploadsBtn, isActive: false, clr: 'rgb(218, 218, 218)' });\r\n        } else {\r\n            setUploadsBtn({ ...uploadsBtn, isActive: true, clr: '#FC335D' });\r\n            setOverviewBtn({ ...overviewBtn, isActive: false, clr: 'rgb(218, 218, 218)' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-profile-page container\">\r\n            <header className=\"flex flex-column justify-center align-center\">\r\n                <img className=\"profile-img\" src={user.imgUrl} alt=\"Profile\" />\r\n                <section className=\"name-container\">\r\n                    <span className=\"name\">{user.name}</span>\r\n                    {loggedInUser && user && loggedInUser._id === user._id && (\r\n                        <Link className=\"edit-btn\" to={`/edit-profile/${loggedInUser._id}`} title=\"Edit Profile\">\r\n                            &#x270E;\r\n                        </Link>\r\n                    )}\r\n                </section>\r\n                <span className=\"role\">{user.role}</span>\r\n                <section className=\"awards flex\">\r\n                    <section className=\"points flex space-evenly\" title=\"Points\">\r\n                        <img src={trophyIcon} alt=\"Points\" />\r\n                        <span>{user.points}</span>\r\n                    </section>\r\n                    <section className=\"likes flex space-evenly\" title=\"Likes\">\r\n                        <img src={likeIcon} alt=\"Likes\" />\r\n                        <span>{user.likes}</span>\r\n                    </section>\r\n                </section>\r\n            </header>\r\n            <main>\r\n                <section className=\"info-btns\">\r\n                    <UserInfoButton btnTxt={overviewBtn.txt} clr={overviewBtn.clr} onClick={onSectionBtnClick} />\r\n                    <UserInfoButton btnTxt={uploadsBtn.txt} clr={uploadsBtn.clr} onClick={onSectionBtnClick} />\r\n                </section>\r\n                {user ? (\r\n                    <UserInfo currUser={user} isOverview={overviewBtn.isActive} isUploads={uploadsBtn.isActive} />\r\n                ) : (\r\n                    <p>Loading...</p>\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserProfilePage;\r\n","module.exports = __webpack_public_path__ + \"static/media/trophy.2e6afe68.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.51343e1f.svg\";","import React from 'react';\r\nimport Highlight, { defaultProps } from 'prism-react-renderer';\r\nimport theme from 'prism-react-renderer/themes/palenight';\r\n\r\nconst Test = ({ code }) => (\r\n    <Highlight {...defaultProps} theme={theme} code={code} language=\"jsx\">\r\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n            <pre className={(className, 'code-snippet')} style={style}>\r\n                {tokens.map((line, i) => (\r\n                    <div {...getLineProps({ line, key: i })}>\r\n                        {line.map((token, key) => (\r\n                            <span {...getTokenProps({ token, key })} />\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </pre>\r\n        )}\r\n    </Highlight>\r\n);\r\n\r\nexport default Test;\r\n"],"sourceRoot":""}