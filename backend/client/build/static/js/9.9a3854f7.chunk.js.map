{"version":3,"sources":["services/StorageService.js","cmps/UserInfoPreview.jsx","cmps/Quiz.jsx","services/SocketService.js","cmps/LiveChat.jsx","cmps/QuizConclusion.jsx","pages/QuizPage.jsx","assets/img/trophy.svg","assets/img/like.svg","cmps/CodeSnippet.jsx"],"names":["StorageService","load","key","JSON","parse","localStorage","getItem","store","value","setItem","stringify","remove","removeItem","UserInfoPreview","userID","getUserByID","useContext","UserContext","useState","user","setUser","useEffect","isMounted","a","loadUserInfo","to","_id","className","src","imgUrl","alt","name","trophyIcon","points","likeIcon","likes","Quiz","socket","questions","category","onProgress","onFinish","updateUser","questionIdx","setQuestionIdx","questionStr","setQuestionStr","codeSnippet","setCodeSnippet","options","setOptions","selectedAnsIdx","setSelectedAnsIdx","userAnswers","setUserAnswers","authorID","setAuthorID","isLike","setIsLike","fixedCategory","toLowerCase","loadUserProgress","onNextQuestionClick","updateAuthorData","author","updatedAuthor","length","quizCategory","currQuestion","question","code","ansOptions","storeUserProgress","onSubmit","e","preventDefault","title","onClick","CodeSnippet","map","option","idx","type","checked","readOnly","SocketService","setup","io","terminate","on","eventName","cb","off","emit","data","LiveChat","loggedInUser","msg","setMsg","useStateIfMounted","chatMsgs","setChatMsgs","useForm","register","handleSubmit","msgsContainerRef","useRef","username","room","setChatRoom","newMsg","current","scrollTo","top","offsetTop","ref","txt","time","placeholder","onChange","target","autoComplete","required","QuizConclusion","quiz","answers","score","setScore","reward","setReward","wrongAnswers","setWrongAnswers","isUserUpdated","setIsUserUpdated","strUserAnswers","ans","toString","diff","forEach","push","Swal","fire","calculateScore","updatedUser","knowledge","some","completedQuiz","badge","updateUserData","id","role","aria-label","QuizPage","QuizContext","loadQuiz","currQuiz","setQuestions","isFinished","setIsFinished","correctAnswers","setCorrectAnswers","setLikes","progress","setProgress","history","useHistory","params","useParams","getQuiz","correctAns","percent","strokeWidth","strokeColor","trailWidth","questsAnswered","currProgress","Math","floor","userLikes","module","exports","Test","defaultProps","theme","language","style","tokens","getLineProps","getTokenProps","line","i","token"],"mappings":"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","file":"static/js/9.9a3854f7.chunk.js","sourcesContent":["export const StorageService = {\r\n    load,\r\n    store,\r\n    remove,\r\n};\r\n\r\nfunction load(key) {\r\n    const storedItem = JSON.parse(localStorage.getItem(key));\r\n    return storedItem;\r\n}\r\n\r\nfunction store(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n}\r\n\r\nfunction remove(key) {\r\n    localStorage.removeItem(key);\r\n}\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserContext } from '../store/contexts/UserContext';\r\nimport trophyIcon from '../assets/img/trophy.svg';\r\nimport likeIcon from '../assets/img/like.svg';\r\n\r\nfunction UserInfoPreview({ userID }) {\r\n    const { getUserByID } = useContext(UserContext);\r\n    const [user, setUser] = useState({});\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        const loadUserInfo = async () => {\r\n            let user = await getUserByID(userID);\r\n            if (isMounted) setUser(user);\r\n        };\r\n        loadUserInfo();\r\n        return () => (isMounted = false);\r\n    }, [userID, getUserByID]);\r\n\r\n    return (\r\n        <Link to={'/profile/' + user._id} className=\"user-info-preview flex\">\r\n            <img src={user.imgUrl} alt=\"Author\" />\r\n            <section className=\"name-container flex flex-column\">\r\n                <div className=\"name\">{user.name}</div>\r\n                <section className=\"user-states flex\">\r\n                    <div className=\"points\">\r\n                        <img src={trophyIcon} alt=\"Points\" />\r\n                        <span>{user.points}</span>\r\n                    </div>\r\n                    <div className=\"likes\">\r\n                        <img src={likeIcon} alt=\"Likes\" />\r\n                        <span>{user.likes}</span>\r\n                    </div>\r\n                </section>\r\n            </section>\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default UserInfoPreview;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserContext } from '../store/contexts/UserContext';\r\nimport CodeSnippet from './CodeSnippet';\r\nimport UserInfoPreview from './UserInfoPreview';\r\nimport { StorageService } from '../services/StorageService.js';\r\nimport { AiOutlineLike, AiTwotoneLike } from 'react-icons/ai';\r\n\r\nfunction Quiz({ questions, category, onProgress, onFinish }) {\r\n    const { getUserByID, updateUser } = useContext(UserContext);\r\n    const [questionIdx, setQuestionIdx] = useState(0);\r\n    const [questionStr, setQuestionStr] = useState('Loading your next question...');\r\n    const [codeSnippet, setCodeSnippet] = useState('');\r\n    const [options, setOptions] = useState([]);\r\n    const [selectedAnsIdx, setSelectedAnsIdx] = useState('');\r\n    const [userAnswers, setUserAnswers] = useState([]);\r\n    const [authorID, setAuthorID] = useState('');\r\n    const [isLike, setIsLike] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const loadUserProgress = () => {\r\n            if (!category) return;\r\n            let fixedCategory = category.toLowerCase();\r\n            setQuestionIdx(StorageService.load(`${fixedCategory}CurrQuestionIdx`) ?? questionIdx);\r\n            setUserAnswers(StorageService.load(`${fixedCategory}Answers`) ?? userAnswers);\r\n        };\r\n        loadUserProgress();\r\n    }, [category]);\r\n\r\n    const onOptionClick = clickedOption => {\r\n        setSelectedAnsIdx(clickedOption);\r\n    };\r\n\r\n    const onNextQuestionClick = async () => {\r\n        if (selectedAnsIdx === '') return;\r\n        if (isLike) {\r\n            await updateAuthorData();\r\n            setIsLike(false);\r\n        }\r\n        onProgress(questionIdx);\r\n        setUserAnswers([...userAnswers, selectedAnsIdx]);\r\n        setQuestionIdx(questionIdx + 1);\r\n        setSelectedAnsIdx('');\r\n    };\r\n\r\n    const updateAuthorData = async () => {\r\n        const author = await getUserByID(authorID);\r\n        let updatedAuthor = {\r\n            ...author,\r\n            likes: author.likes + 1,\r\n        };\r\n        await updateUser(updatedAuthor);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (questionIdx === questions.length && questionIdx !== 0) {\r\n            let quizCategory = category.toLowerCase();\r\n            StorageService.store(quizCategory + 'Answers', userAnswers);\r\n            onFinish();\r\n            return;\r\n        }\r\n\r\n        if (questions.length > 0) {\r\n            let currQuestion = questions[questionIdx];\r\n            setQuestionStr(currQuestion.question);\r\n            setCodeSnippet(currQuestion.code);\r\n            setOptions(currQuestion.ansOptions);\r\n            setAuthorID(currQuestion.authorID);\r\n        }\r\n\r\n        const storeUserProgress = () => {\r\n            let quizCategory = category.toLowerCase();\r\n            StorageService.store(quizCategory + 'Answers', userAnswers);\r\n            if (questionIdx === questions.length && questionIdx !== 0) return;\r\n            StorageService.store(quizCategory + 'CurrQuestionIdx', questionIdx);\r\n        };\r\n\r\n        storeUserProgress();\r\n    }, [userAnswers, questions, questionIdx, onFinish, category]);\r\n\r\n    return (\r\n        <div className=\"quiz\">\r\n            <form className=\"flex flex-column justify-center\" onSubmit={e => e.preventDefault()}>\r\n                <section className=\"question-container\">\r\n                    <section className=\"question flex align-center space-between\">\r\n                        <span>\r\n                            Q#{questionIdx + 1}: {questionStr}\r\n                        </span>\r\n                        <button className=\"like-btn\" title=\"Like\" onClick={() => setIsLike(!isLike)}>\r\n                            {!isLike ? <AiOutlineLike /> : <AiTwotoneLike />}\r\n                        </button>\r\n                    </section>\r\n                    {codeSnippet && (\r\n                        <section className=\"question-code\">\r\n                            <CodeSnippet code={codeSnippet} />\r\n                        </section>\r\n                    )}\r\n                </section>\r\n                <section className=\"options flex flex-column\">\r\n                    {options.map((option, idx) => (\r\n                        <label className=\"flex align-center\" key={idx} onClick={() => onOptionClick(idx)}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                name={`option${idx + 1}`}\r\n                                checked={selectedAnsIdx === idx}\r\n                                value={option}\r\n                                readOnly={true}\r\n                            />\r\n                            <span>{option}</span>\r\n                        </label>\r\n                    ))}\r\n                </section>\r\n                <div className=\"btns-author-container flex space-between align-center\">\r\n                    <section className=\"btns grow-3 flex align-center\">\r\n                        <button className=\"next-btn\" onClick={onNextQuestionClick}>\r\n                            Next Question\r\n                        </button>\r\n                        <Link className=\"quit-btn\" to=\"/\">\r\n                            Quit\r\n                        </Link>\r\n                    </section>\r\n                    <section className=\"author flex grow-1 justify-end\" title=\"Question Author\">\r\n                        <UserInfoPreview userID={authorID} />\r\n                    </section>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n","import io from 'socket.io-client';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\nlet socket;\r\n\r\nexport const SocketService = {\r\n    setup,\r\n    terminate,\r\n    on,\r\n    off,\r\n    emit,\r\n};\r\n\r\nfunction setup() {\r\n    socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n    socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n    socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n    socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    socket.emit(eventName, data);\r\n}\r\n","import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport { useStateIfMounted } from 'use-state-if-mounted';\r\nimport { UserContext } from '../store/contexts/UserContext';\r\nimport { SocketService } from '../services/SocketService.js';\r\nimport { useForm } from 'react-hook-form';\r\nimport { MdSend } from 'react-icons/md';\r\n\r\nfunction LiveChat({ category }) {\r\n    const { loggedInUser } = useContext(UserContext);\r\n    const [msg, setMsg] = useState('');\r\n    const [chatMsgs, setChatMsgs] = useStateIfMounted([]);\r\n    const { register, handleSubmit } = useForm();\r\n    const msgsContainerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const connectSocket = () => {\r\n            SocketService.setup();\r\n        };\r\n        connectSocket();\r\n        return () => SocketService.terminate();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const setChatRoom = () => {\r\n            if (!loggedInUser || !category) return;\r\n            setChatMsgs([]);\r\n            let username = loggedInUser.name;\r\n            let room = category;\r\n            SocketService.emit('joinRoom', { username, room });\r\n        };\r\n        setChatRoom();\r\n    }, [loggedInUser, category]);\r\n\r\n    useEffect(() => {\r\n        const onNewMsg = () => {\r\n            if (!loggedInUser) return;\r\n            SocketService.on('chat newMsg', newMsg => {\r\n                setChatMsgs([...chatMsgs, newMsg]);\r\n            });\r\n        };\r\n        onNewMsg();\r\n    }, [msg]);\r\n\r\n    useEffect(() => {\r\n        msgsContainerRef.current.scrollTo({\r\n            top: msgsContainerRef.current.offsetTop,\r\n        });\r\n    }, [chatMsgs]);\r\n\r\n    const onSubmit = ({ msg }) => {\r\n        const newMsg = {\r\n            txt: msg,\r\n            imgUrl: loggedInUser.imgUrl,\r\n        };\r\n        SocketService.emit('chat newMsg', newMsg);\r\n        setMsg('');\r\n    };\r\n\r\n    const renderMsgs = () => {\r\n        return chatMsgs.map(({ imgUrl, username, txt, time }, idx) => (\r\n            <section className=\"msg-container flex align-center\" key={idx}>\r\n                <section className=\"img-container\">\r\n                    <img src={imgUrl} alt=\"User\" />\r\n                </section>\r\n                <div>\r\n                    <section className=\"from-details flex\">\r\n                        <p className=\"username\">{username}</p>\r\n                        <small className=\"time\">{time}</small>\r\n                    </section>\r\n                    <section className=\"msg\">\r\n                        <p className=\"txt\">{txt}</p>\r\n                    </section>\r\n                </div>\r\n            </section>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div className=\"live-chat flex flex-column space-between\">\r\n            <section className=\"msgs-container\" ref={msgsContainerRef}>\r\n                {renderMsgs()}\r\n            </section>\r\n            <form className=\"flex space-evenly align-center\" onSubmit={handleSubmit(onSubmit)}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type a message\"\r\n                    value={msg}\r\n                    name=\"msg\"\r\n                    ref={register}\r\n                    onChange={e => setMsg(e.target.value)}\r\n                    autoComplete=\"off\"\r\n                    required\r\n                />\r\n                <button className=\"flex align-center\">\r\n                    <MdSend title=\"Send message\" />\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LiveChat;\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserContext } from '../store/contexts/UserContext';\r\nimport { StorageService } from '../services/StorageService';\r\nimport CodeSnippet from './CodeSnippet';\r\nimport UserInfoPreview from './UserInfoPreview';\r\nimport trophyIcon from '../assets/img/trophy.svg';\r\nimport Swal from 'sweetalert2';\r\n\r\nfunction QuizConclusion({ quiz, answers }) {\r\n    const { loggedInUser, updateUser } = useContext(UserContext);\r\n    const [userAnswers, setUserAnswers] = useState([]);\r\n    const [score, setScore] = useState('');\r\n    const [reward, setReward] = useState('');\r\n    const [wrongAnswers, setWrongAnswers] = useState([]);\r\n    const [isUserUpdated, setIsUserUpdated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const intUserAnswers = StorageService.load(`${quiz.category.toLowerCase()}Answers`);\r\n        const strUserAnswers = intUserAnswers.map(ans => (ans + 1).toString());\r\n        setUserAnswers(strUserAnswers);\r\n    }, [quiz.category]);\r\n\r\n    useEffect(() => {\r\n        if (userAnswers.length === 0) return;\r\n        const calculateScore = () => {\r\n            const diff = [];\r\n            userAnswers.forEach((ans, idx) => {\r\n                if (answers[idx] !== ans) diff.push(quiz.questions[idx]);\r\n            });\r\n            if (diff.length === 0) {\r\n                Swal.fire('Great Job!', 'Perfect quiz!', 'success');\r\n            }\r\n            setWrongAnswers(diff);\r\n            setScore(`${answers.length - diff.length}/${answers.length}`);\r\n            if (diff.length === 0) setReward(answers.length * 25);\r\n            else setReward((answers.length - diff.length) * 25);\r\n        };\r\n        calculateScore();\r\n    }, [userAnswers, answers, quiz.questions]);\r\n\r\n    useEffect(() => {\r\n        const cleanStorage = () => {\r\n            StorageService.remove(`${quiz.category.toLowerCase()}Answers`);\r\n        };\r\n        cleanStorage();\r\n    }, [wrongAnswers, quiz.category]);\r\n\r\n    useEffect(() => {\r\n        if (reward === '') return;\r\n        const updateUserData = async () => {\r\n            let updatedUser = {\r\n                ...loggedInUser,\r\n                points: loggedInUser.points + reward,\r\n            };\r\n            if (\r\n                wrongAnswers.length === 0 &&\r\n                !updatedUser.knowledge.some(completedQuiz => completedQuiz.category === quiz.category)\r\n            ) {\r\n                updatedUser.knowledge.push({ category: quiz.category, badge: quiz.imgUrl });\r\n            }\r\n            await updateUser(updatedUser);\r\n            setIsUserUpdated(true);\r\n        };\r\n        updateUserData();\r\n    }, [reward, quiz.category, wrongAnswers.length]);\r\n\r\n    return (\r\n        <div className=\"quiz-conclusion flex flex-column\">\r\n            <p className=\"title\">Quiz Conclusion</p>\r\n            <section className=\"flex flex-column space-between\">\r\n                <div className=\"stats-wrapper flex space-evenly align-center\">\r\n                    <section className=\"user-preview\">\r\n                        {isUserUpdated && <UserInfoPreview userID={loggedInUser._id} title=\"Your profile\" />}\r\n                    </section>\r\n                    <section className=\"score-container flex flex-column align-center\">\r\n                        <span>Your score </span>\r\n                        <span className=\"score\">{score}</span>\r\n                    </section>\r\n                    <section className=\"user-reward flex flex-column align-center\">\r\n                        <span>Your reward </span>\r\n                        <div className=\"points\">\r\n                            <img src={trophyIcon} alt=\"Points\" />\r\n                            <span className=\"reward\">{reward}</span>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n                <section className=\"wrong-questions\">\r\n                    <p className=\"wrong-quest-header\">Wrong Questions:</p>\r\n                    {wrongAnswers.length > 0 ? (\r\n                        wrongAnswers.map(({ question, id, code, authorID }) => {\r\n                            return (\r\n                                <section className=\"question-container flex flex-column\" key={id}>\r\n                                    <section className=\"question\">{question}</section>\r\n                                    {code && (\r\n                                        <section className=\"question-code\">\r\n                                            <CodeSnippet code={code} />\r\n                                        </section>\r\n                                    )}\r\n                                    {isUserUpdated && (\r\n                                        <div className=\"user-preview-wrapper\" title=\"Author\">\r\n                                            <UserInfoPreview userID={authorID} />\r\n                                        </div>\r\n                                    )}\r\n                                </section>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <>\r\n                            <p>\r\n                                None, GOOD JOB!\r\n                                <span role=\"img\" aria-label=\"Celebrate\">\r\n                                    🥳\r\n                                </span>\r\n                            </p>\r\n                            <section className=\"badge-container flex align-center justify-center\">\r\n                                <span>New badge: </span>\r\n                                <img src={quiz.imgUrl} alt=\"Badge\" />\r\n                            </section>\r\n                        </>\r\n                    )}\r\n                </section>\r\n            </section>\r\n            <Link to=\"/\" className=\"homepage-btn self-center\">\r\n                Back to homepage\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizConclusion;\r\n","import React, { useEffect, useContext, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { StorageService } from '../services/StorageService';\r\nimport { QuizContext } from '../store/contexts/QuizContext';\r\nimport Quiz from '../cmps/Quiz';\r\nimport LiveChat from '../cmps/LiveChat';\r\nimport QuizConclusion from '../cmps/QuizConclusion';\r\nimport { Line } from 'rc-progress';\r\n\r\nfunction QuizPage() {\r\n    const { loadQuiz, currQuiz } = useContext(QuizContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [isFinished, setIsFinished] = useState(false);\r\n    const [correctAnswers, setCorrectAnswers] = useState([]);\r\n    const [likes, setLikes] = useState(0);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    const history = useHistory();\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        const getQuiz = async () => {\r\n            const quizCategory = params.category;\r\n            const loadedQuiz = await loadQuiz(quizCategory);\r\n            if (loadedQuiz === null) history.push('/err-page');\r\n        };\r\n\r\n        getQuiz();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (currQuiz) {\r\n            setQuestions(currQuiz.questions);\r\n            let answers = currQuiz.questions.map(question => question.correctAns);\r\n            setCorrectAnswers(answers);\r\n        }\r\n    }, [currQuiz]);\r\n\r\n    const updateProgress = questionIdx => {\r\n        let questsAnswered = questionIdx + 1;\r\n        let currProgress = Math.floor((questsAnswered / questions.length) * 100);\r\n        setProgress(currProgress);\r\n    };\r\n\r\n    const onQuizEnd = userLikes => {\r\n        setLikes(userLikes);\r\n        const category = currQuiz.category.toLowerCase();\r\n        StorageService.store(category + 'CurrQuestionIdx', 0);\r\n        setIsFinished(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"quiz-page container\">\r\n            {currQuiz ? (\r\n                <>\r\n                    <header>\r\n                        <h1>{currQuiz.category}</h1>\r\n                        <section className=\"progress-container flex align-center\">\r\n                            <Line\r\n                                className=\"progress-bar\"\r\n                                percent={progress}\r\n                                strokeWidth=\"2\"\r\n                                strokeColor=\"#fd6585\"\r\n                                trailWidth=\"1\"\r\n                            />\r\n                            <p className=\"progress-str\">{progress}%</p>\r\n                        </section>\r\n                    </header>\r\n                    <main>\r\n                        {isFinished ? (\r\n                            <QuizConclusion quiz={currQuiz} answers={correctAnswers} likes={likes} />\r\n                        ) : (\r\n                            <>\r\n                                <Quiz\r\n                                    questions={questions}\r\n                                    category={currQuiz.category}\r\n                                    onProgress={updateProgress}\r\n                                    onFinish={onQuizEnd}\r\n                                />\r\n                                <LiveChat category={currQuiz.category} />\r\n                            </>\r\n                        )}\r\n                    </main>\r\n                </>\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizPage;\r\n","module.exports = __webpack_public_path__ + \"static/media/trophy.2e6afe68.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.51343e1f.svg\";","import React from 'react';\r\nimport Highlight, { defaultProps } from 'prism-react-renderer';\r\nimport theme from 'prism-react-renderer/themes/palenight';\r\n\r\nconst Test = ({ code }) => (\r\n    <Highlight {...defaultProps} theme={theme} code={code} language=\"jsx\">\r\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n            <pre className={(className, 'code-snippet')} style={style}>\r\n                {tokens.map((line, i) => (\r\n                    <div {...getLineProps({ line, key: i })}>\r\n                        {line.map((token, key) => (\r\n                            <span {...getTokenProps({ token, key })} />\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </pre>\r\n        )}\r\n    </Highlight>\r\n);\r\n\r\nexport default Test;\r\n"],"sourceRoot":""}